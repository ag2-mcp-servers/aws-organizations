# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T12:56:35+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, List, Optional

from pydantic import BaseModel, Field, RootModel, SecretStr, conint, constr


class AWSOrganizationsNotInUseException(RootModel[Any]):
    root: Any


class AccessDeniedException(RootModel[Any]):
    root: Any


class AccessDeniedForDependencyException(RootModel[Any]):
    root: Any


class AccountAlreadyClosedException(RootModel[Any]):
    root: Any


class AccountAlreadyRegisteredException(RootModel[Any]):
    root: Any


class AccountArn(
    RootModel[
        constr(
            pattern=r'^arn:aws:organizations::\d{12}:account\/o-[a-z0-9]{10,32}\/\d{12}'
        )
    ]
):
    root: constr(
        pattern=r'^arn:aws:organizations::\d{12}:account\/o-[a-z0-9]{10,32}\/\d{12}'
    )


class AccountId(RootModel[constr(pattern=r'^\d{12}$', max_length=12)]):
    root: constr(pattern=r'^\d{12}$', max_length=12)


class AccountJoinedMethod(Enum):
    INVITED = 'INVITED'
    CREATED = 'CREATED'


class AccountName(RootModel[SecretStr]):
    root: SecretStr


class AccountNotFoundException(RootModel[Any]):
    root: Any


class AccountNotRegisteredException(RootModel[Any]):
    root: Any


class AccountOwnerNotVerifiedException(RootModel[Any]):
    root: Any


class AccountStatus(Enum):
    ACTIVE = 'ACTIVE'
    SUSPENDED = 'SUSPENDED'
    PENDING_CLOSURE = 'PENDING_CLOSURE'


class ActionType(Enum):
    INVITE = 'INVITE'
    ENABLE_ALL_FEATURES = 'ENABLE_ALL_FEATURES'
    APPROVE_ALL_FEATURES = 'APPROVE_ALL_FEATURES'
    ADD_ORGANIZATIONS_SERVICE_LINKED_ROLE = 'ADD_ORGANIZATIONS_SERVICE_LINKED_ROLE'


class AlreadyInOrganizationException(RootModel[Any]):
    root: Any


class AwsManagedPolicy(RootModel[bool]):
    root: bool


class ChildId(
    RootModel[
        constr(pattern=r'^(\d{12})|(ou-[0-9a-z]{4,32}-[a-z0-9]{8,32})$', max_length=100)
    ]
):
    root: constr(
        pattern=r'^(\d{12})|(ou-[0-9a-z]{4,32}-[a-z0-9]{8,32})$', max_length=100
    )


class ChildNotFoundException(RootModel[Any]):
    root: Any


class ChildType(Enum):
    ACCOUNT = 'ACCOUNT'
    ORGANIZATIONAL_UNIT = 'ORGANIZATIONAL_UNIT'


class CloseAccountRequest(BaseModel):
    AccountId_1: AccountId = Field(..., alias='AccountId')


class ConcurrentModificationException(RootModel[Any]):
    root: Any


class ConflictException(RootModel[Any]):
    root: Any


class ConstraintViolationException(RootModel[Any]):
    root: Any


class CreateAccountFailureReason(Enum):
    ACCOUNT_LIMIT_EXCEEDED = 'ACCOUNT_LIMIT_EXCEEDED'
    EMAIL_ALREADY_EXISTS = 'EMAIL_ALREADY_EXISTS'
    INVALID_ADDRESS = 'INVALID_ADDRESS'
    INVALID_EMAIL = 'INVALID_EMAIL'
    CONCURRENT_ACCOUNT_MODIFICATION = 'CONCURRENT_ACCOUNT_MODIFICATION'
    INTERNAL_FAILURE = 'INTERNAL_FAILURE'
    GOVCLOUD_ACCOUNT_ALREADY_EXISTS = 'GOVCLOUD_ACCOUNT_ALREADY_EXISTS'
    MISSING_BUSINESS_VALIDATION = 'MISSING_BUSINESS_VALIDATION'
    FAILED_BUSINESS_VALIDATION = 'FAILED_BUSINESS_VALIDATION'
    PENDING_BUSINESS_VALIDATION = 'PENDING_BUSINESS_VALIDATION'
    INVALID_IDENTITY_FOR_BUSINESS_VALIDATION = (
        'INVALID_IDENTITY_FOR_BUSINESS_VALIDATION'
    )
    UNKNOWN_BUSINESS_VALIDATION = 'UNKNOWN_BUSINESS_VALIDATION'
    MISSING_PAYMENT_INSTRUMENT = 'MISSING_PAYMENT_INSTRUMENT'
    INVALID_PAYMENT_INSTRUMENT = 'INVALID_PAYMENT_INSTRUMENT'
    UPDATE_EXISTING_RESOURCE_POLICY_WITH_TAGS_NOT_SUPPORTED = (
        'UPDATE_EXISTING_RESOURCE_POLICY_WITH_TAGS_NOT_SUPPORTED'
    )


class CreateAccountName(RootModel[SecretStr]):
    root: SecretStr


class CreateAccountRequestId(
    RootModel[constr(pattern=r'^car-[a-z0-9]{8,32}$', max_length=36)]
):
    root: constr(pattern=r'^car-[a-z0-9]{8,32}$', max_length=36)


class CreateAccountState(Enum):
    IN_PROGRESS = 'IN_PROGRESS'
    SUCCEEDED = 'SUCCEEDED'
    FAILED = 'FAILED'


class CreateAccountStates(RootModel[List[CreateAccountState]]):
    root: List[CreateAccountState]


class CreateAccountStatusNotFoundException(RootModel[Any]):
    root: Any


class DescribeAccountRequest(BaseModel):
    AccountId_1: AccountId = Field(..., alias='AccountId')


class DescribeCreateAccountStatusRequest(BaseModel):
    CreateAccountRequestId_1: CreateAccountRequestId = Field(
        ..., alias='CreateAccountRequestId'
    )


class DestinationParentNotFoundException(RootModel[Any]):
    root: Any


class DuplicateAccountException(RootModel[Any]):
    root: Any


class DuplicateHandshakeException(RootModel[Any]):
    root: Any


class DuplicateOrganizationalUnitException(RootModel[Any]):
    root: Any


class DuplicatePolicyAttachmentException(RootModel[Any]):
    root: Any


class DuplicatePolicyException(RootModel[Any]):
    root: Any


class EffectivePolicyNotFoundException(RootModel[Any]):
    root: Any


class EffectivePolicyType(Enum):
    TAG_POLICY = 'TAG_POLICY'
    BACKUP_POLICY = 'BACKUP_POLICY'
    AISERVICES_OPT_OUT_POLICY = 'AISERVICES_OPT_OUT_POLICY'


class Email(RootModel[SecretStr]):
    root: SecretStr


class EnableAllFeaturesRequest(BaseModel):
    pass


class FinalizingOrganizationException(RootModel[Any]):
    root: Any


class GenericArn(RootModel[constr(pattern=r'^arn:aws:organizations::.+:.+')]):
    root: constr(pattern=r'^arn:aws:organizations::.+:.+')


class HandshakeAlreadyInStateException(RootModel[Any]):
    root: Any


class HandshakeArn(
    RootModel[
        constr(
            pattern=r'^arn:aws:organizations::\d{12}:handshake\/o-[a-z0-9]{10,32}\/[a-z_]{1,32}\/h-[0-9a-z]{8,32}'
        )
    ]
):
    root: constr(
        pattern=r'^arn:aws:organizations::\d{12}:handshake\/o-[a-z0-9]{10,32}\/[a-z_]{1,32}\/h-[0-9a-z]{8,32}'
    )


class HandshakeConstraintViolationException(RootModel[Any]):
    root: Any


class HandshakeId(RootModel[constr(pattern=r'^h-[0-9a-z]{8,32}$', max_length=34)]):
    root: constr(pattern=r'^h-[0-9a-z]{8,32}$', max_length=34)


class HandshakeNotFoundException(RootModel[Any]):
    root: Any


class HandshakeNotes(RootModel[SecretStr]):
    root: SecretStr


class HandshakePartyId(RootModel[SecretStr]):
    root: SecretStr


class HandshakePartyType(Enum):
    ACCOUNT = 'ACCOUNT'
    ORGANIZATION = 'ORGANIZATION'
    EMAIL = 'EMAIL'


class HandshakeResourceType(Enum):
    ACCOUNT = 'ACCOUNT'
    ORGANIZATION = 'ORGANIZATION'
    ORGANIZATION_FEATURE_SET = 'ORGANIZATION_FEATURE_SET'
    EMAIL = 'EMAIL'
    MASTER_EMAIL = 'MASTER_EMAIL'
    MASTER_NAME = 'MASTER_NAME'
    NOTES = 'NOTES'
    PARENT_HANDSHAKE = 'PARENT_HANDSHAKE'


class HandshakeResourceValue(RootModel[SecretStr]):
    root: SecretStr


class HandshakeState(Enum):
    REQUESTED = 'REQUESTED'
    OPEN = 'OPEN'
    CANCELED = 'CANCELED'
    ACCEPTED = 'ACCEPTED'
    DECLINED = 'DECLINED'
    EXPIRED = 'EXPIRED'


class IAMUserAccessToBilling(Enum):
    ALLOW = 'ALLOW'
    DENY = 'DENY'


class InvalidHandshakeTransitionException(RootModel[Any]):
    root: Any


class InvalidInputException(RootModel[Any]):
    root: Any


class MalformedPolicyDocumentException(RootModel[Any]):
    root: Any


class MasterCannotLeaveOrganizationException(RootModel[Any]):
    root: Any


class MaxResults(RootModel[conint(ge=1, le=20)]):
    root: conint(ge=1, le=20)


class NextToken(RootModel[constr(pattern=r'[\s\S]*', max_length=100000)]):
    root: constr(pattern=r'[\s\S]*', max_length=100000)


class OrganizationArn(
    RootModel[
        constr(
            pattern=r'^arn:aws:organizations::\d{12}:organization\/o-[a-z0-9]{10,32}'
        )
    ]
):
    root: constr(
        pattern=r'^arn:aws:organizations::\d{12}:organization\/o-[a-z0-9]{10,32}'
    )


class OrganizationFeatureSet(Enum):
    ALL = 'ALL'
    CONSOLIDATED_BILLING = 'CONSOLIDATED_BILLING'


class OrganizationId(RootModel[constr(pattern=r'^o-[a-z0-9]{10,32}$')]):
    root: constr(pattern=r'^o-[a-z0-9]{10,32}$')


class OrganizationNotEmptyException(RootModel[Any]):
    root: Any


class OrganizationalUnitArn(
    RootModel[
        constr(
            pattern=r'^arn:aws:organizations::\d{12}:ou\/o-[a-z0-9]{10,32}\/ou-[0-9a-z]{4,32}-[0-9a-z]{8,32}'
        )
    ]
):
    root: constr(
        pattern=r'^arn:aws:organizations::\d{12}:ou\/o-[a-z0-9]{10,32}\/ou-[0-9a-z]{4,32}-[0-9a-z]{8,32}'
    )


class OrganizationalUnitId(
    RootModel[constr(pattern=r'^ou-[0-9a-z]{4,32}-[a-z0-9]{8,32}$', max_length=68)]
):
    root: constr(pattern=r'^ou-[0-9a-z]{4,32}-[a-z0-9]{8,32}$', max_length=68)


class OrganizationalUnitName(
    RootModel[constr(pattern=r'[\s\S]*', min_length=1, max_length=128)]
):
    root: constr(pattern=r'[\s\S]*', min_length=1, max_length=128)


class OrganizationalUnitNotEmptyException(RootModel[Any]):
    root: Any


class OrganizationalUnitNotFoundException(RootModel[Any]):
    root: Any


class ParentId(
    RootModel[
        constr(
            pattern=r'^(r-[0-9a-z]{4,32})|(ou-[0-9a-z]{4,32}-[a-z0-9]{8,32})$',
            max_length=100,
        )
    ]
):
    root: constr(
        pattern=r'^(r-[0-9a-z]{4,32})|(ou-[0-9a-z]{4,32}-[a-z0-9]{8,32})$',
        max_length=100,
    )


class ParentNotFoundException(RootModel[Any]):
    root: Any


class ParentType(Enum):
    ROOT = 'ROOT'
    ORGANIZATIONAL_UNIT = 'ORGANIZATIONAL_UNIT'


class PolicyArn(
    RootModel[
        constr(
            pattern=r'^(arn:aws:organizations::\d{12}:policy\/o-[a-z0-9]{10,32}\/[0-9a-z_]+\/p-[0-9a-z]{10,32})|(arn:aws:organizations::aws:policy\/[0-9a-z_]+\/p-[0-9a-zA-Z_]{10,128})'
        )
    ]
):
    root: constr(
        pattern=r'^(arn:aws:organizations::\d{12}:policy\/o-[a-z0-9]{10,32}\/[0-9a-z_]+\/p-[0-9a-z]{10,32})|(arn:aws:organizations::aws:policy\/[0-9a-z_]+\/p-[0-9a-zA-Z_]{10,128})'
    )


class PolicyChangesInProgressException(RootModel[Any]):
    root: Any


class PolicyContent(
    RootModel[constr(pattern=r'[\s\S]*', min_length=1, max_length=1000000)]
):
    root: constr(pattern=r'[\s\S]*', min_length=1, max_length=1000000)


class PolicyDescription(RootModel[constr(pattern=r'[\s\S]*', max_length=512)]):
    root: constr(pattern=r'[\s\S]*', max_length=512)


class PolicyId(RootModel[constr(pattern=r'^p-[0-9a-zA-Z_]{8,128}$', max_length=130)]):
    root: constr(pattern=r'^p-[0-9a-zA-Z_]{8,128}$', max_length=130)


class PolicyInUseException(RootModel[Any]):
    root: Any


class PolicyName(RootModel[constr(pattern=r'[\s\S]*', min_length=1, max_length=128)]):
    root: constr(pattern=r'[\s\S]*', min_length=1, max_length=128)


class PolicyNotAttachedException(RootModel[Any]):
    root: Any


class PolicyNotFoundException(RootModel[Any]):
    root: Any


class PolicyTargetId(
    RootModel[
        constr(
            pattern=r'^(r-[0-9a-z]{4,32})|(\d{12})|(ou-[0-9a-z]{4,32}-[a-z0-9]{8,32})$',
            max_length=100,
        )
    ]
):
    root: constr(
        pattern=r'^(r-[0-9a-z]{4,32})|(\d{12})|(ou-[0-9a-z]{4,32}-[a-z0-9]{8,32})$',
        max_length=100,
    )


class PolicyType(Enum):
    SERVICE_CONTROL_POLICY = 'SERVICE_CONTROL_POLICY'
    TAG_POLICY = 'TAG_POLICY'
    BACKUP_POLICY = 'BACKUP_POLICY'
    AISERVICES_OPT_OUT_POLICY = 'AISERVICES_OPT_OUT_POLICY'


class PolicyTypeAlreadyEnabledException(RootModel[Any]):
    root: Any


class PolicyTypeNotAvailableForOrganizationException(RootModel[Any]):
    root: Any


class PolicyTypeNotEnabledException(RootModel[Any]):
    root: Any


class PolicyTypeStatus(Enum):
    ENABLED = 'ENABLED'
    PENDING_ENABLE = 'PENDING_ENABLE'
    PENDING_DISABLE = 'PENDING_DISABLE'


class PolicyTypeSummary(BaseModel):
    Status: Optional[PolicyTypeStatus] = None
    Type: Optional[PolicyType] = None


class PolicyTypes(RootModel[List[PolicyTypeSummary]]):
    root: List[PolicyTypeSummary]


class RemoveAccountFromOrganizationRequest(BaseModel):
    AccountId_1: AccountId = Field(..., alias='AccountId')


class ResourcePolicyArn(
    RootModel[
        constr(
            pattern=r'^arn:[a-z0-9][a-z0-9-.]{0,62}:organizations::\d{12}:resourcepolicy\/o-[a-z0-9]{10,32}\/rp-[0-9a-zA-Z_]{4,128}'
        )
    ]
):
    root: constr(
        pattern=r'^arn:[a-z0-9][a-z0-9-.]{0,62}:organizations::\d{12}:resourcepolicy\/o-[a-z0-9]{10,32}\/rp-[0-9a-zA-Z_]{4,128}'
    )


class ResourcePolicyContent(
    RootModel[constr(pattern=r'[\s\S]*', min_length=1, max_length=40000)]
):
    root: constr(pattern=r'[\s\S]*', min_length=1, max_length=40000)


class ResourcePolicyId(
    RootModel[constr(pattern=r'^rp-[0-9a-zA-Z_]{4,128}$', max_length=131)]
):
    root: constr(pattern=r'^rp-[0-9a-zA-Z_]{4,128}$', max_length=131)


class ResourcePolicyNotFoundException(RootModel[Any]):
    root: Any


class ResourcePolicySummary(BaseModel):
    Arn: Optional[ResourcePolicyArn] = None
    Id: Optional[ResourcePolicyId] = None


class RoleName(RootModel[constr(pattern=r'[\w+=,.@-]{1,64}', max_length=64)]):
    root: constr(pattern=r'[\w+=,.@-]{1,64}', max_length=64)


class RootArn(
    RootModel[
        constr(
            pattern=r'^arn:aws:organizations::\d{12}:root\/o-[a-z0-9]{10,32}\/r-[0-9a-z]{4,32}'
        )
    ]
):
    root: constr(
        pattern=r'^arn:aws:organizations::\d{12}:root\/o-[a-z0-9]{10,32}\/r-[0-9a-z]{4,32}'
    )


class RootId(RootModel[constr(pattern=r'^r-[0-9a-z]{4,32}$', max_length=34)]):
    root: constr(pattern=r'^r-[0-9a-z]{4,32}$', max_length=34)


class RootName(RootModel[constr(min_length=1, max_length=128)]):
    root: constr(min_length=1, max_length=128)


class RootNotFoundException(RootModel[Any]):
    root: Any


class ServiceException(RootModel[Any]):
    root: Any


class ServicePrincipal(
    RootModel[constr(pattern=r'[\w+=,.@-]*', min_length=1, max_length=128)]
):
    root: constr(pattern=r'[\w+=,.@-]*', min_length=1, max_length=128)


class SourceParentNotFoundException(RootModel[Any]):
    root: Any


class TagKey(
    RootModel[
        constr(pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$', min_length=1, max_length=128)
    ]
):
    root: constr(
        pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$', min_length=1, max_length=128
    )


class TagKeys(RootModel[List[TagKey]]):
    root: List[TagKey]


class TagValue(
    RootModel[
        constr(pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$', min_length=0, max_length=256)
    ]
):
    root: constr(
        pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$', min_length=0, max_length=256
    )


class TaggableResourceId(
    RootModel[
        constr(
            pattern=r'^(r-[0-9a-z]{4,32})|(\d{12})|(ou-[0-9a-z]{4,32}-[a-z0-9]{8,32})|(^p-[0-9a-zA-Z_]{8,128})|(^rp-[0-9a-zA-Z_]{4,128})$',
            max_length=130,
        )
    ]
):
    root: constr(
        pattern=r'^(r-[0-9a-z]{4,32})|(\d{12})|(ou-[0-9a-z]{4,32}-[a-z0-9]{8,32})|(^p-[0-9a-zA-Z_]{8,128})|(^rp-[0-9a-zA-Z_]{4,128})$',
        max_length=130,
    )


class TargetName(RootModel[constr(min_length=1, max_length=128)]):
    root: constr(min_length=1, max_length=128)


class TargetNotFoundException(RootModel[Any]):
    root: Any


class TargetType(Enum):
    ACCOUNT = 'ACCOUNT'
    ORGANIZATIONAL_UNIT = 'ORGANIZATIONAL_UNIT'
    ROOT = 'ROOT'


class Timestamp(RootModel[datetime]):
    root: datetime


class TooManyRequestsException(RootModel[Any]):
    root: Any


class UnsupportedAPIEndpointException(RootModel[Any]):
    root: Any


class UntagResourceRequest(BaseModel):
    ResourceId: TaggableResourceId
    TagKeys_1: TagKeys = Field(..., alias='TagKeys')


class UpdateOrganizationalUnitRequest(BaseModel):
    Name: Optional[OrganizationalUnitName] = None
    OrganizationalUnitId_1: OrganizationalUnitId = Field(
        ..., alias='OrganizationalUnitId'
    )


class UpdatePolicyRequest(BaseModel):
    Content: Optional[PolicyContent] = None
    Description: Optional[PolicyDescription] = None
    Name: Optional[PolicyName] = None
    PolicyId_1: PolicyId = Field(..., alias='PolicyId')


class XAmzTarget(Enum):
    AWSOrganizationsV20161128_AcceptHandshake = (
        'AWSOrganizationsV20161128.AcceptHandshake'
    )


class XAmzTarget1(Enum):
    AWSOrganizationsV20161128_AttachPolicy = 'AWSOrganizationsV20161128.AttachPolicy'


class XAmzTarget2(Enum):
    AWSOrganizationsV20161128_CancelHandshake = (
        'AWSOrganizationsV20161128.CancelHandshake'
    )


class XAmzTarget3(Enum):
    AWSOrganizationsV20161128_CloseAccount = 'AWSOrganizationsV20161128.CloseAccount'


class XAmzTarget4(Enum):
    AWSOrganizationsV20161128_CreateAccount = 'AWSOrganizationsV20161128.CreateAccount'


class XAmzTarget5(Enum):
    AWSOrganizationsV20161128_CreateGovCloudAccount = (
        'AWSOrganizationsV20161128.CreateGovCloudAccount'
    )


class XAmzTarget6(Enum):
    AWSOrganizationsV20161128_CreateOrganization = (
        'AWSOrganizationsV20161128.CreateOrganization'
    )


class XAmzTarget7(Enum):
    AWSOrganizationsV20161128_CreateOrganizationalUnit = (
        'AWSOrganizationsV20161128.CreateOrganizationalUnit'
    )


class XAmzTarget8(Enum):
    AWSOrganizationsV20161128_CreatePolicy = 'AWSOrganizationsV20161128.CreatePolicy'


class XAmzTarget9(Enum):
    AWSOrganizationsV20161128_DeclineHandshake = (
        'AWSOrganizationsV20161128.DeclineHandshake'
    )


class XAmzTarget10(Enum):
    AWSOrganizationsV20161128_DeleteOrganization = (
        'AWSOrganizationsV20161128.DeleteOrganization'
    )


class XAmzTarget11(Enum):
    AWSOrganizationsV20161128_DeleteOrganizationalUnit = (
        'AWSOrganizationsV20161128.DeleteOrganizationalUnit'
    )


class XAmzTarget12(Enum):
    AWSOrganizationsV20161128_DeletePolicy = 'AWSOrganizationsV20161128.DeletePolicy'


class XAmzTarget13(Enum):
    AWSOrganizationsV20161128_DeleteResourcePolicy = (
        'AWSOrganizationsV20161128.DeleteResourcePolicy'
    )


class XAmzTarget14(Enum):
    AWSOrganizationsV20161128_DeregisterDelegatedAdministrator = (
        'AWSOrganizationsV20161128.DeregisterDelegatedAdministrator'
    )


class XAmzTarget15(Enum):
    AWSOrganizationsV20161128_DescribeAccount = (
        'AWSOrganizationsV20161128.DescribeAccount'
    )


class XAmzTarget16(Enum):
    AWSOrganizationsV20161128_DescribeCreateAccountStatus = (
        'AWSOrganizationsV20161128.DescribeCreateAccountStatus'
    )


class XAmzTarget17(Enum):
    AWSOrganizationsV20161128_DescribeEffectivePolicy = (
        'AWSOrganizationsV20161128.DescribeEffectivePolicy'
    )


class XAmzTarget18(Enum):
    AWSOrganizationsV20161128_DescribeHandshake = (
        'AWSOrganizationsV20161128.DescribeHandshake'
    )


class XAmzTarget19(Enum):
    AWSOrganizationsV20161128_DescribeOrganization = (
        'AWSOrganizationsV20161128.DescribeOrganization'
    )


class XAmzTarget20(Enum):
    AWSOrganizationsV20161128_DescribeOrganizationalUnit = (
        'AWSOrganizationsV20161128.DescribeOrganizationalUnit'
    )


class XAmzTarget21(Enum):
    AWSOrganizationsV20161128_DescribePolicy = (
        'AWSOrganizationsV20161128.DescribePolicy'
    )


class XAmzTarget22(Enum):
    AWSOrganizationsV20161128_DescribeResourcePolicy = (
        'AWSOrganizationsV20161128.DescribeResourcePolicy'
    )


class XAmzTarget23(Enum):
    AWSOrganizationsV20161128_DetachPolicy = 'AWSOrganizationsV20161128.DetachPolicy'


class XAmzTarget24(Enum):
    AWSOrganizationsV20161128_DisableAWSServiceAccess = (
        'AWSOrganizationsV20161128.DisableAWSServiceAccess'
    )


class XAmzTarget25(Enum):
    AWSOrganizationsV20161128_DisablePolicyType = (
        'AWSOrganizationsV20161128.DisablePolicyType'
    )


class XAmzTarget26(Enum):
    AWSOrganizationsV20161128_EnableAWSServiceAccess = (
        'AWSOrganizationsV20161128.EnableAWSServiceAccess'
    )


class XAmzTarget27(Enum):
    AWSOrganizationsV20161128_EnableAllFeatures = (
        'AWSOrganizationsV20161128.EnableAllFeatures'
    )


class XAmzTarget28(Enum):
    AWSOrganizationsV20161128_EnablePolicyType = (
        'AWSOrganizationsV20161128.EnablePolicyType'
    )


class XAmzTarget29(Enum):
    AWSOrganizationsV20161128_InviteAccountToOrganization = (
        'AWSOrganizationsV20161128.InviteAccountToOrganization'
    )


class XAmzTarget30(Enum):
    AWSOrganizationsV20161128_LeaveOrganization = (
        'AWSOrganizationsV20161128.LeaveOrganization'
    )


class XAmzTarget31(Enum):
    AWSOrganizationsV20161128_ListAWSServiceAccessForOrganization = (
        'AWSOrganizationsV20161128.ListAWSServiceAccessForOrganization'
    )


class XAmzTarget32(Enum):
    AWSOrganizationsV20161128_ListAccounts = 'AWSOrganizationsV20161128.ListAccounts'


class XAmzTarget33(Enum):
    AWSOrganizationsV20161128_ListAccountsForParent = (
        'AWSOrganizationsV20161128.ListAccountsForParent'
    )


class XAmzTarget34(Enum):
    AWSOrganizationsV20161128_ListChildren = 'AWSOrganizationsV20161128.ListChildren'


class XAmzTarget35(Enum):
    AWSOrganizationsV20161128_ListCreateAccountStatus = (
        'AWSOrganizationsV20161128.ListCreateAccountStatus'
    )


class XAmzTarget36(Enum):
    AWSOrganizationsV20161128_ListDelegatedAdministrators = (
        'AWSOrganizationsV20161128.ListDelegatedAdministrators'
    )


class XAmzTarget37(Enum):
    AWSOrganizationsV20161128_ListDelegatedServicesForAccount = (
        'AWSOrganizationsV20161128.ListDelegatedServicesForAccount'
    )


class XAmzTarget38(Enum):
    AWSOrganizationsV20161128_ListHandshakesForAccount = (
        'AWSOrganizationsV20161128.ListHandshakesForAccount'
    )


class XAmzTarget39(Enum):
    AWSOrganizationsV20161128_ListHandshakesForOrganization = (
        'AWSOrganizationsV20161128.ListHandshakesForOrganization'
    )


class XAmzTarget40(Enum):
    AWSOrganizationsV20161128_ListOrganizationalUnitsForParent = (
        'AWSOrganizationsV20161128.ListOrganizationalUnitsForParent'
    )


class XAmzTarget41(Enum):
    AWSOrganizationsV20161128_ListParents = 'AWSOrganizationsV20161128.ListParents'


class XAmzTarget42(Enum):
    AWSOrganizationsV20161128_ListPolicies = 'AWSOrganizationsV20161128.ListPolicies'


class XAmzTarget43(Enum):
    AWSOrganizationsV20161128_ListPoliciesForTarget = (
        'AWSOrganizationsV20161128.ListPoliciesForTarget'
    )


class XAmzTarget44(Enum):
    AWSOrganizationsV20161128_ListRoots = 'AWSOrganizationsV20161128.ListRoots'


class XAmzTarget45(Enum):
    AWSOrganizationsV20161128_ListTagsForResource = (
        'AWSOrganizationsV20161128.ListTagsForResource'
    )


class XAmzTarget46(Enum):
    AWSOrganizationsV20161128_ListTargetsForPolicy = (
        'AWSOrganizationsV20161128.ListTargetsForPolicy'
    )


class XAmzTarget47(Enum):
    AWSOrganizationsV20161128_MoveAccount = 'AWSOrganizationsV20161128.MoveAccount'


class XAmzTarget48(Enum):
    AWSOrganizationsV20161128_PutResourcePolicy = (
        'AWSOrganizationsV20161128.PutResourcePolicy'
    )


class XAmzTarget49(Enum):
    AWSOrganizationsV20161128_RegisterDelegatedAdministrator = (
        'AWSOrganizationsV20161128.RegisterDelegatedAdministrator'
    )


class XAmzTarget50(Enum):
    AWSOrganizationsV20161128_RemoveAccountFromOrganization = (
        'AWSOrganizationsV20161128.RemoveAccountFromOrganization'
    )


class XAmzTarget51(Enum):
    AWSOrganizationsV20161128_TagResource = 'AWSOrganizationsV20161128.TagResource'


class XAmzTarget52(Enum):
    AWSOrganizationsV20161128_UntagResource = 'AWSOrganizationsV20161128.UntagResource'


class XAmzTarget53(Enum):
    AWSOrganizationsV20161128_UpdateOrganizationalUnit = (
        'AWSOrganizationsV20161128.UpdateOrganizationalUnit'
    )


class XAmzTarget54(Enum):
    AWSOrganizationsV20161128_UpdatePolicy = 'AWSOrganizationsV20161128.UpdatePolicy'


class AcceptHandshakeRequest(BaseModel):
    HandshakeId_1: HandshakeId = Field(..., alias='HandshakeId')


class Account(BaseModel):
    Arn: Optional[AccountArn] = None
    Email_1: Optional[Email] = Field(None, alias='Email')
    Id: Optional[AccountId] = None
    JoinedMethod: Optional[AccountJoinedMethod] = None
    JoinedTimestamp: Optional[Timestamp] = None
    Name: Optional[AccountName] = None
    Status: Optional[AccountStatus] = None


class Accounts(RootModel[List[Account]]):
    root: List[Account]


class AttachPolicyRequest(BaseModel):
    PolicyId_1: PolicyId = Field(..., alias='PolicyId')
    TargetId: PolicyTargetId


class CancelHandshakeRequest(BaseModel):
    HandshakeId_1: HandshakeId = Field(..., alias='HandshakeId')


class Child(BaseModel):
    Id: Optional[ChildId] = None
    Type: Optional[ChildType] = None


class Children(RootModel[List[Child]]):
    root: List[Child]


class CreateAccountStatus(BaseModel):
    AccountId_1: Optional[AccountId] = Field(None, alias='AccountId')
    AccountName: Optional[CreateAccountName] = None
    CompletedTimestamp: Optional[Timestamp] = None
    FailureReason: Optional[CreateAccountFailureReason] = None
    GovCloudAccountId: Optional[AccountId] = None
    Id: Optional[CreateAccountRequestId] = None
    RequestedTimestamp: Optional[Timestamp] = None
    State: Optional[CreateAccountState] = None


class CreateAccountStatuses(RootModel[List[CreateAccountStatus]]):
    root: List[CreateAccountStatus]


class CreateGovCloudAccountResponse(BaseModel):
    CreateAccountStatus_1: Optional[CreateAccountStatus] = Field(
        None, alias='CreateAccountStatus'
    )


class CreateOrganizationRequest(BaseModel):
    FeatureSet: Optional[OrganizationFeatureSet] = None


class DeclineHandshakeRequest(BaseModel):
    HandshakeId_1: HandshakeId = Field(..., alias='HandshakeId')


class DelegatedAdministrator(BaseModel):
    Arn: Optional[AccountArn] = None
    DelegationEnabledDate: Optional[Timestamp] = None
    Email_1: Optional[Email] = Field(None, alias='Email')
    Id: Optional[AccountId] = None
    JoinedMethod: Optional[AccountJoinedMethod] = None
    JoinedTimestamp: Optional[Timestamp] = None
    Name: Optional[AccountName] = None
    Status: Optional[AccountStatus] = None


class DelegatedAdministrators(RootModel[List[DelegatedAdministrator]]):
    root: List[DelegatedAdministrator]


class DelegatedService(BaseModel):
    DelegationEnabledDate: Optional[Timestamp] = None
    ServicePrincipal_1: Optional[ServicePrincipal] = Field(
        None, alias='ServicePrincipal'
    )


class DelegatedServices(RootModel[List[DelegatedService]]):
    root: List[DelegatedService]


class DeleteOrganizationalUnitRequest(BaseModel):
    OrganizationalUnitId_1: OrganizationalUnitId = Field(
        ..., alias='OrganizationalUnitId'
    )


class DeletePolicyRequest(BaseModel):
    PolicyId_1: PolicyId = Field(..., alias='PolicyId')


class DeregisterDelegatedAdministratorRequest(BaseModel):
    AccountId_1: AccountId = Field(..., alias='AccountId')
    ServicePrincipal_1: ServicePrincipal = Field(..., alias='ServicePrincipal')


class DescribeAccountResponse(BaseModel):
    Account_1: Optional[Account] = Field(None, alias='Account')


class DescribeCreateAccountStatusResponse(BaseModel):
    CreateAccountStatus_1: Optional[CreateAccountStatus] = Field(
        None, alias='CreateAccountStatus'
    )


class DescribeEffectivePolicyRequest(BaseModel):
    PolicyType: EffectivePolicyType
    TargetId: Optional[PolicyTargetId] = None


class DescribeHandshakeRequest(BaseModel):
    HandshakeId_1: HandshakeId = Field(..., alias='HandshakeId')


class DescribeOrganizationalUnitRequest(BaseModel):
    OrganizationalUnitId_1: OrganizationalUnitId = Field(
        ..., alias='OrganizationalUnitId'
    )


class DescribePolicyRequest(BaseModel):
    PolicyId_1: PolicyId = Field(..., alias='PolicyId')


class DetachPolicyRequest(BaseModel):
    PolicyId_1: PolicyId = Field(..., alias='PolicyId')
    TargetId: PolicyTargetId


class DisableAWSServiceAccessRequest(BaseModel):
    ServicePrincipal_1: ServicePrincipal = Field(..., alias='ServicePrincipal')


class DisablePolicyTypeRequest(BaseModel):
    PolicyType_1: PolicyType = Field(..., alias='PolicyType')
    RootId_1: RootId = Field(..., alias='RootId')


class EffectivePolicy(BaseModel):
    LastUpdatedTimestamp: Optional[Timestamp] = None
    PolicyContent_1: Optional[PolicyContent] = Field(None, alias='PolicyContent')
    PolicyType: Optional[EffectivePolicyType] = None
    TargetId: Optional[PolicyTargetId] = None


class EnableAWSServiceAccessRequest(BaseModel):
    ServicePrincipal_1: ServicePrincipal = Field(..., alias='ServicePrincipal')


class EnablePolicyTypeRequest(BaseModel):
    PolicyType_1: PolicyType = Field(..., alias='PolicyType')
    RootId_1: RootId = Field(..., alias='RootId')


class EnabledServicePrincipal(BaseModel):
    DateEnabled: Optional[Timestamp] = None
    ServicePrincipal_1: Optional[ServicePrincipal] = Field(
        None, alias='ServicePrincipal'
    )


class EnabledServicePrincipals(RootModel[List[EnabledServicePrincipal]]):
    root: List[EnabledServicePrincipal]


class HandshakeFilter(BaseModel):
    ActionType_1: Optional[ActionType] = Field(None, alias='ActionType')
    ParentHandshakeId: Optional[HandshakeId] = None


class HandshakeParty(BaseModel):
    Id: HandshakePartyId
    Type: HandshakePartyType


class ListAWSServiceAccessForOrganizationRequest(BaseModel):
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListAWSServiceAccessForOrganizationResponse(BaseModel):
    EnabledServicePrincipals_1: Optional[EnabledServicePrincipals] = Field(
        None, alias='EnabledServicePrincipals'
    )
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListAccountsForParentRequest(BaseModel):
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    ParentId_1: ParentId = Field(..., alias='ParentId')


class ListAccountsForParentResponse(BaseModel):
    Accounts_1: Optional[Accounts] = Field(None, alias='Accounts')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListAccountsRequest(BaseModel):
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListAccountsResponse(BaseModel):
    Accounts_1: Optional[Accounts] = Field(None, alias='Accounts')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListChildrenRequest(BaseModel):
    ChildType_1: ChildType = Field(..., alias='ChildType')
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    ParentId_1: ParentId = Field(..., alias='ParentId')


class ListChildrenResponse(BaseModel):
    Children_1: Optional[Children] = Field(None, alias='Children')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListCreateAccountStatusRequest(BaseModel):
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    States: Optional[CreateAccountStates] = None


class ListCreateAccountStatusResponse(BaseModel):
    CreateAccountStatuses_1: Optional[CreateAccountStatuses] = Field(
        None, alias='CreateAccountStatuses'
    )
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListDelegatedAdministratorsRequest(BaseModel):
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    ServicePrincipal_1: Optional[ServicePrincipal] = Field(
        None, alias='ServicePrincipal'
    )


class ListDelegatedAdministratorsResponse(BaseModel):
    DelegatedAdministrators_1: Optional[DelegatedAdministrators] = Field(
        None, alias='DelegatedAdministrators'
    )
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListDelegatedServicesForAccountRequest(BaseModel):
    AccountId_1: AccountId = Field(..., alias='AccountId')
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListDelegatedServicesForAccountResponse(BaseModel):
    DelegatedServices_1: Optional[DelegatedServices] = Field(
        None, alias='DelegatedServices'
    )
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListHandshakesForAccountRequest(BaseModel):
    Filter: Optional[HandshakeFilter] = None
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListHandshakesForOrganizationRequest(BaseModel):
    Filter: Optional[HandshakeFilter] = None
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListOrganizationalUnitsForParentRequest(BaseModel):
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    ParentId_1: ParentId = Field(..., alias='ParentId')


class ListParentsRequest(BaseModel):
    ChildId_1: ChildId = Field(..., alias='ChildId')
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListPoliciesForTargetRequest(BaseModel):
    Filter: PolicyType
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    TargetId: PolicyTargetId


class ListPoliciesRequest(BaseModel):
    Filter: PolicyType
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListRootsRequest(BaseModel):
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListTagsForResourceRequest(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    ResourceId: TaggableResourceId


class ListTargetsForPolicyRequest(BaseModel):
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    PolicyId_1: PolicyId = Field(..., alias='PolicyId')


class MoveAccountRequest(BaseModel):
    AccountId_1: AccountId = Field(..., alias='AccountId')
    DestinationParentId: ParentId
    SourceParentId: ParentId


class Organization(BaseModel):
    Arn: Optional[OrganizationArn] = None
    AvailablePolicyTypes: Optional[PolicyTypes] = None
    FeatureSet: Optional[OrganizationFeatureSet] = None
    Id: Optional[OrganizationId] = None
    MasterAccountArn: Optional[AccountArn] = None
    MasterAccountEmail: Optional[Email] = None
    MasterAccountId: Optional[AccountId] = None


class OrganizationalUnit(BaseModel):
    Arn: Optional[OrganizationalUnitArn] = None
    Id: Optional[OrganizationalUnitId] = None
    Name: Optional[OrganizationalUnitName] = None


class OrganizationalUnits(RootModel[List[OrganizationalUnit]]):
    root: List[OrganizationalUnit]


class Parent(BaseModel):
    Id: Optional[ParentId] = None
    Type: Optional[ParentType] = None


class Parents(RootModel[List[Parent]]):
    root: List[Parent]


class PolicySummary(BaseModel):
    Arn: Optional[PolicyArn] = None
    AwsManaged: Optional[AwsManagedPolicy] = None
    Description: Optional[PolicyDescription] = None
    Id: Optional[PolicyId] = None
    Name: Optional[PolicyName] = None
    Type: Optional[PolicyType] = None


class PolicyTargetSummary(BaseModel):
    Arn: Optional[GenericArn] = None
    Name: Optional[TargetName] = None
    TargetId: Optional[PolicyTargetId] = None
    Type: Optional[TargetType] = None


class PolicyTargets(RootModel[List[PolicyTargetSummary]]):
    root: List[PolicyTargetSummary]


class RegisterDelegatedAdministratorRequest(BaseModel):
    AccountId_1: AccountId = Field(..., alias='AccountId')
    ServicePrincipal_1: ServicePrincipal = Field(..., alias='ServicePrincipal')


class ResourcePolicy(BaseModel):
    Content: Optional[ResourcePolicyContent] = None
    ResourcePolicySummary_1: Optional[ResourcePolicySummary] = Field(
        None, alias='ResourcePolicySummary'
    )


class Root(BaseModel):
    Arn: Optional[RootArn] = None
    Id: Optional[RootId] = None
    Name: Optional[RootName] = None
    PolicyTypes_1: Optional[PolicyTypes] = Field(None, alias='PolicyTypes')


class Roots(RootModel[List[Root]]):
    root: List[Root]


class Tag(BaseModel):
    Key: TagKey
    Value: TagValue


class Tags(RootModel[List[Tag]]):
    root: List[Tag]


class UpdateOrganizationalUnitResponse(BaseModel):
    OrganizationalUnit_1: Optional[OrganizationalUnit] = Field(
        None, alias='OrganizationalUnit'
    )


class CreateAccountRequest(BaseModel):
    AccountName: CreateAccountName
    Email_1: Email = Field(..., alias='Email')
    IamUserAccessToBilling: Optional[IAMUserAccessToBilling] = None
    RoleName_1: Optional[RoleName] = Field(None, alias='RoleName')
    Tags_1: Optional[Tags] = Field(None, alias='Tags')


class CreateAccountResponse(BaseModel):
    CreateAccountStatus_1: Optional[CreateAccountStatus] = Field(
        None, alias='CreateAccountStatus'
    )


class CreateGovCloudAccountRequest(BaseModel):
    AccountName: CreateAccountName
    Email_1: Email = Field(..., alias='Email')
    IamUserAccessToBilling: Optional[IAMUserAccessToBilling] = None
    RoleName_1: Optional[RoleName] = Field(None, alias='RoleName')
    Tags_1: Optional[Tags] = Field(None, alias='Tags')


class CreateOrganizationResponse(BaseModel):
    Organization_1: Optional[Organization] = Field(None, alias='Organization')


class CreateOrganizationalUnitRequest(BaseModel):
    Name: OrganizationalUnitName
    ParentId_1: ParentId = Field(..., alias='ParentId')
    Tags_1: Optional[Tags] = Field(None, alias='Tags')


class CreateOrganizationalUnitResponse(BaseModel):
    OrganizationalUnit_1: Optional[OrganizationalUnit] = Field(
        None, alias='OrganizationalUnit'
    )


class CreatePolicyRequest(BaseModel):
    Content: PolicyContent
    Description: PolicyDescription
    Name: PolicyName
    Tags_1: Optional[Tags] = Field(None, alias='Tags')
    Type: PolicyType


class DescribeEffectivePolicyResponse(BaseModel):
    EffectivePolicy_1: Optional[EffectivePolicy] = Field(None, alias='EffectivePolicy')


class DescribeOrganizationResponse(BaseModel):
    Organization_1: Optional[Organization] = Field(None, alias='Organization')


class DescribeOrganizationalUnitResponse(BaseModel):
    OrganizationalUnit_1: Optional[OrganizationalUnit] = Field(
        None, alias='OrganizationalUnit'
    )


class DescribeResourcePolicyResponse(BaseModel):
    ResourcePolicy_1: Optional[ResourcePolicy] = Field(None, alias='ResourcePolicy')


class DisablePolicyTypeResponse(BaseModel):
    Root_1: Optional[Root] = Field(None, alias='Root')


class EnablePolicyTypeResponse(BaseModel):
    Root_1: Optional[Root] = Field(None, alias='Root')


class HandshakeParties(RootModel[List[HandshakeParty]]):
    root: List[HandshakeParty]


class InviteAccountToOrganizationRequest(BaseModel):
    Notes: Optional[HandshakeNotes] = None
    Tags_1: Optional[Tags] = Field(None, alias='Tags')
    Target: HandshakeParty


class ListOrganizationalUnitsForParentResponse(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    OrganizationalUnits_1: Optional[OrganizationalUnits] = Field(
        None, alias='OrganizationalUnits'
    )


class ListParentsResponse(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    Parents_1: Optional[Parents] = Field(None, alias='Parents')


class ListRootsResponse(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    Roots_1: Optional[Roots] = Field(None, alias='Roots')


class ListTagsForResourceResponse(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    Tags_1: Optional[Tags] = Field(None, alias='Tags')


class ListTargetsForPolicyResponse(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    Targets: Optional[PolicyTargets] = None


class Policies(RootModel[List[PolicySummary]]):
    root: List[PolicySummary]


class Policy(BaseModel):
    Content: Optional[PolicyContent] = None
    PolicySummary_1: Optional[PolicySummary] = Field(None, alias='PolicySummary')


class PutResourcePolicyRequest(BaseModel):
    Content: ResourcePolicyContent
    Tags_1: Optional[Tags] = Field(None, alias='Tags')


class PutResourcePolicyResponse(BaseModel):
    ResourcePolicy_1: Optional[ResourcePolicy] = Field(None, alias='ResourcePolicy')


class TagResourceRequest(BaseModel):
    ResourceId: TaggableResourceId
    Tags_1: Tags = Field(..., alias='Tags')


class UpdatePolicyResponse(BaseModel):
    Policy_1: Optional[Policy] = Field(None, alias='Policy')


class CreatePolicyResponse(BaseModel):
    Policy_1: Optional[Policy] = Field(None, alias='Policy')


class DescribePolicyResponse(BaseModel):
    Policy_1: Optional[Policy] = Field(None, alias='Policy')


class ListPoliciesForTargetResponse(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    Policies_1: Optional[Policies] = Field(None, alias='Policies')


class ListPoliciesResponse(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    Policies_1: Optional[Policies] = Field(None, alias='Policies')


class AcceptHandshakeResponse(BaseModel):
    Handshake_1: Optional[Handshake] = Field(None, alias='Handshake')


class CancelHandshakeResponse(BaseModel):
    Handshake_1: Optional[Handshake] = Field(None, alias='Handshake')


class DeclineHandshakeResponse(BaseModel):
    Handshake_1: Optional[Handshake] = Field(None, alias='Handshake')


class DescribeHandshakeResponse(BaseModel):
    Handshake_1: Optional[Handshake] = Field(None, alias='Handshake')


class EnableAllFeaturesResponse(BaseModel):
    Handshake_1: Optional[Handshake] = Field(None, alias='Handshake')


class Handshake(BaseModel):
    Action: Optional[ActionType] = None
    Arn: Optional[HandshakeArn] = None
    ExpirationTimestamp: Optional[Timestamp] = None
    Id: Optional[HandshakeId] = None
    Parties: Optional[HandshakeParties] = None
    RequestedTimestamp: Optional[Timestamp] = None
    Resources: Optional[HandshakeResources] = None
    State: Optional[HandshakeState] = None


class HandshakeResource(BaseModel):
    Resources: Optional[HandshakeResources] = None
    Type: Optional[HandshakeResourceType] = None
    Value: Optional[HandshakeResourceValue] = None


class HandshakeResources(RootModel[List[HandshakeResource]]):
    root: List[HandshakeResource]


class Handshakes(RootModel[List[Handshake]]):
    root: List[Handshake]


class InviteAccountToOrganizationResponse(BaseModel):
    Handshake_1: Optional[Handshake] = Field(None, alias='Handshake')


class ListHandshakesForAccountResponse(BaseModel):
    Handshakes_1: Optional[Handshakes] = Field(None, alias='Handshakes')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListHandshakesForOrganizationResponse(BaseModel):
    Handshakes_1: Optional[Handshakes] = Field(None, alias='Handshakes')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


AcceptHandshakeResponse.model_rebuild()
CancelHandshakeResponse.model_rebuild()
DeclineHandshakeResponse.model_rebuild()
DescribeHandshakeResponse.model_rebuild()
EnableAllFeaturesResponse.model_rebuild()
Handshake.model_rebuild()
HandshakeResource.model_rebuild()
